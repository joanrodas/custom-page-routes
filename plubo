#!/usr/bin/env php
<?php
if(isset($argv[1])) {
  $action = $argv[1];

  switch ($action) {
    case 'init':
      plubo_init();
      break;

    case 'add':
      if($argc > 2) plubo_add( $argv[2], ($argv[3] ?? '') );
      else {
        echo "\e[0;35mSometimes the only choices you have are bad ones, but you still have to choose:\e[0m\n\r\r\n";
        echo "1. Tailwind CSS\r\n";
        echo "2. Alpine.js\r\n";
        echo "3. React\r\n";
        echo "4. Yoyo\r\n";
        echo "5. ENV\r\n\r\n";
        $option = trim( readline("Select option[1-5]: ") );
        switch ($option) {
          case '1':
            plubo_add('tailwind');
            break;
          case '2':
            plubo_add('alpine');
            break;
          case '3':
            $react_name = trim( readline("OK! Input your app name or leave blank for default: \r\n") );
            plubo_add('react', $react_name);
            break;
          case '4':
            plubo_add('yoyo');
            break;
          case '5':
            plubo_add('env');
            break;
          default:
            echo "\e[0;32;47mTo the rational mind, nothing is inexplicable; only unexplained.\e[0m\n\r\r\n";
            break;
        }
      }
      break;

    case 'remove':
      if($argc > 2) plubo_remove( $argv[2], ($argv[3] ?? '') );
      die();
      break;

    default:
      echo "\e[0;32;47mTo the rational mind, nothing is inexplicable; only unexplained.\e[0m\n\r\r\n";
      break;
  }
  die();
}
else {
  echo "\e[0;35mSometimes the only choices you have are bad ones, but you still have to choose...\e[0m\n\r\r\n";
}


/* FUNCTIONS */
function plubo_add($option, $path='') {
  $option = strtolower($option);
  switch ($option) {
    case 'tailwind':
    case 'tailwindcss':
      ob_start(); ?>
@tailwind base;
@tailwind components;
@tailwind utilities;
<?php $tailwind_contents = ob_get_clean();
      echo "Installing Tailwind CSS with npm...\r\n";
      shell_exec('npm install -D tailwindcss');
      file_put_contents('./resources/assets/styles/autoload/_tailwind.scss', $tailwind_contents);

      $config = file_get_contents('./resources/assets/build/postcss.config.js');
      $config = str_replace("//tailwindcss: {},", "tailwindcss: {},", $config);
      file_put_contents('./resources/assets/build/postcss.config.js', $config);

      echo "\e[0;32mTailwind CSS ready to speed up you development ;)\e[0m\n\r\r\n";
      break;

    case 'alpine':
    case 'alpine.js':
    case 'alpinejs':
      ob_start(); ?>
import Alpine from 'alpinejs';
window.Alpine = Alpine;
Alpine.start();
<?php $alpine_contents = ob_get_clean();
      echo "Installing Alpine.js with npm...\r\n";
      shell_exec('npm install alpinejs');
      file_put_contents('./resources/assets/scripts/autoload/_alpine.js', $alpine_contents);
      echo "\e[0;32mAlpine.js added!\e[0m\n\r\r\n";
      break;

    case 'react':
    case 'reactjs':
      echo "Adding React app...\r\n";
      if(!$path) $path = uniqid('react-', false);
      mkdir("./react/apps/$path", 0777, true);
      mkdir("./react/apps/$path/src", 0777, true);
      ob_start();?>
const path = require( 'path' );

const defaultConfig = require( '@wordpress/scripts/config/webpack.config' );

const rootDir = path.resolve( __dirname );

const paths = {
	srcDir: path.resolve( rootDir, 'src' ),
	buildDIr: path.resolve( rootDir, 'build' ),
};

module.exports = {
	...defaultConfig,
	resolve: {
		...defaultConfig.resolve,
		// alias directories to paths you can use in import() statements
		alias: {
			components: path.join(paths.srcDir, "components"),
			store: path.join(paths.srcDir, "store"),
		},
	},
};
<?php $webpack_contents = ob_get_clean();
      file_put_contents("./react/apps/$path/webpack.config.js", $webpack_contents);

      ob_start();?>
{
  "name": "<?= $path ?>",
  "version": "1.0.0",
  "private": true,
  "scripts": {
    "build": "wp-scripts build",
    "check-engines": "wp-scripts check-engines",
    "check-licenses": "wp-scripts check-licenses",
    "lint:css": "wp-scripts lint-style",
    "lint:js": "wp-scripts lint-js",
    "lint:md": "wp-scripts lint-md",
    "lint:pkg-json": "wp-scripts lint-pkg-json",
    "packages-update": "wp-scripts packages-update",
    "start": "wp-scripts start",
    "test:e2e": "wp-scripts test-e2e",
    "test:unit": "wp-scripts test-unit-js",
    "wp-env": "wp-env"
  },
  "devDependencies": {
    "@wordpress/data-controls": "^2.2.7",
    "@wordpress/env": "^4.1.3",
    "@wordpress/eslint-plugin": "^9.3.0",
    "@wordpress/keycodes": "^3.2.4",
    "@wordpress/scripts": "^19.2.2",
    "autoprefixer": "^10.4.0",
    "css-loader": "^6.5.1",
    "eslint": "^8.3.0",
    "mini-css-extract-plugin": "^2.4.5",
    "node-sass": "^6.0.1",
    "postcss-loader": "^6.2.0",
    "sass-loader": "^12.3.0",
    "style-loader": "^3.3.1",
    "webpack": "^5.64.3",
    "webpack-cli": "^4.9.1"
  },
  "dependencies": {
    "@wordpress/api-fetch": "^5.2.6",
    "@wordpress/components": "^19.0.5",
    "@wordpress/dom-ready": "^3.2.3",
    "@wordpress/element": "^4.0.4",
    "@wordpress/i18n": "^4.2.4"
  }
}
      <?php $package_contents = ob_get_clean();
      file_put_contents("./react/apps/$path/package.json", $package_contents);
      ob_start();?>
import domReady from '@wordpress/dom-ready';
import { render } from '@wordpress/element';

import App from './App';
import './styles.scss';

domReady( function() {
	render( <App />, document.getElementById( 'react-<?= $path ?>' ) );
} );
      <?php $index_contents = ob_get_clean();
      file_put_contents("./react/apps/$path/src/index.js", $index_contents);
      ob_start();?>
function App() {
  return ('IT WORKS!');
}

export default App;
<?php $app_content = ob_get_clean();
      file_put_contents("./react/apps/$path/src/App.js", $app_content);
      file_put_contents("./react/apps/$path/src/styles.scss", '');

      $config = file_get_contents('./react/apps.php');
      $config .= '$apps[]=' . "'$path';\r\n";
      file_put_contents('./react/apps.php', $config);
      echo "\e[0;32mReact app $path created (•̀ᴗ•́)و ̑\e[0m\n\r\r\n";
      break;

    case 'yoyo':
      echo "\e[0;32mYoyo added ;)\e[0m\n\r\n\r";
      break;

    case 'env':
      shell_exec('composer require vlucas/phpdotenv');
      if( !file_exists(".env") ) file_put_contents(".env", '');
      echo "\e[0;32mENV prepared ;)\e[0m\n\r\n\r";
      break;

    default:
      echo "\e[0;32;47mTo the rational mind, nothing is inexplicable; only unexplained.\e[0m\n\r\r\n";
      break;
  }
}

function plubo_init() {
  $tailwind = trim( readline("Do you need Tailwind CSS? Y/n: ") );
  $tailwind = !$tailwind || $tailwind === 'y' || $tailwind === 'yes' || $tailwind === 'yep';
  if($tailwind) plubo_add('tailwind');
  else echo "Not configuring Tailwind CSS ಥ_ಥ\r\n\r\n";

  $alpine = trim( readline("Do you need Alpine.js? Y/n: ") );
  $alpine = !$alpine || $alpine === 'y' || $alpine === 'yes' || $alpine === 'yep';
  if($alpine) plubo_add('alpine');
  else echo "Not installing Alpine.js ¯\_(⊙︿⊙)_/¯\r\n\r\n";

  $react = trim( readline("Do you need a React app? y/N: ") );
  $react = $react === 'y' || $react === 'yes' || $react === 'yep';
  if($react) {
    $react_name = trim( readline("OK! Input your app name or leave blank for default: \r\n") );
    plubo_add('react', $react_name);
  }
  else echo "React is not needed... ಥ_ಥ\r\n\r\n";
}
